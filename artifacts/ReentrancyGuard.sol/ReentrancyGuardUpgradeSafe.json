{"abi":[],"bytecode":{"object":"0x6080604052348015600f57600080fd5b50603f80601d6000396000f3fe6080604052600080fdfea2646970667358221220bb857bb94dcb5614143a4a39dd7ecf5d08b7f0d89765ea4902b0f370845c093c64736f6c63430006020033","sourceMap":"807:1562:38:-:0;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;807:1562:38;;;;;;;","linkReferences":{}},"deployedBytecode":{"object":"0x6080604052600080fdfea2646970667358221220bb857bb94dcb5614143a4a39dd7ecf5d08b7f0d89765ea4902b0f370845c093c64736f6c63430006020033","sourceMap":"807:1562:38:-:0;;;;;","linkReferences":{}},"methodIdentifiers":{},"rawMetadata":"{\"compiler\":{\"version\":\"0.6.2+commit.bacdbe57\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Contract module that helps prevent reentrant calls to a function. * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier available, which can be applied to functions to make sure there are no nested (reentrant) calls to them. * Note that because there is a single `nonReentrant` guard, functions marked as `nonReentrant` may not call one another. This can be worked around by making those functions `private`, and then adding `external` `nonReentrant` entry points to them. * TIP: If you would like to learn more about reentrancy and alternative ways to protect against it, check out our blog post https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\",\"methods\":{}},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"node_modules/@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol\":\"ReentrancyGuardUpgradeSafe\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@ensdomains/=node_modules/@ensdomains/\",\":@openzeppelin/=node_modules/@openzeppelin/\",\":@uniswap/=node_modules/@uniswap/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":forge-std/=lib/forge-std/src/\",\":hardhat/=node_modules/hardhat/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":truffle/=node_modules/truffle/\"]},\"sources\":{\"node_modules/@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol\":{\"keccak256\":\"0x9bfec92e36234ecc99b5d37230acb6cd1f99560233753162204104a4897e8721\",\"urls\":[\"bzz-raw://5cf7c208583d4d046d75bd99f5507412ab01cce9dd9f802ce9768a416d93ea2f\",\"dweb:/ipfs/QmcQS1BBMPpVEkXP3qzwSjxHNrqDek8YeR7xbVWDC9ApC7\"]},\"node_modules/@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol\":{\"keccak256\":\"0x75a600e5ed3443ecf3b7fb636064b404b358317fd6cd91e70e3ca5cf2370e882\",\"urls\":[\"bzz-raw://5916e664a17b3fdbdc311579705bad74f433769c340346c371db2ecfa8427d24\",\"dweb:/ipfs/QmYNLuiPo4iRPWFJriVgqPELRUrFBFLpp5YnMMmqQ8zhBh\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.6.2+commit.bacdbe57"},"language":"Solidity","output":{"abi":[],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"remappings":["@ensdomains/=node_modules/@ensdomains/","@openzeppelin/=node_modules/@openzeppelin/","@uniswap/=node_modules/@uniswap/","ds-test/=lib/forge-std/lib/ds-test/src/","forge-std/=lib/forge-std/src/","hardhat/=node_modules/hardhat/","openzeppelin-contracts/=lib/openzeppelin-contracts/","truffle/=node_modules/truffle/"],"optimizer":{"enabled":true,"runs":200},"metadata":{"bytecodeHash":"ipfs"},"compilationTarget":{"node_modules/@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol":"ReentrancyGuardUpgradeSafe"},"evmVersion":"istanbul","libraries":{}},"sources":{"node_modules/@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol":{"keccak256":"0x9bfec92e36234ecc99b5d37230acb6cd1f99560233753162204104a4897e8721","urls":["bzz-raw://5cf7c208583d4d046d75bd99f5507412ab01cce9dd9f802ce9768a416d93ea2f","dweb:/ipfs/QmcQS1BBMPpVEkXP3qzwSjxHNrqDek8YeR7xbVWDC9ApC7"],"license":null},"node_modules/@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol":{"keccak256":"0x75a600e5ed3443ecf3b7fb636064b404b358317fd6cd91e70e3ca5cf2370e882","urls":["bzz-raw://5916e664a17b3fdbdc311579705bad74f433769c340346c371db2ecfa8427d24","dweb:/ipfs/QmYNLuiPo4iRPWFJriVgqPELRUrFBFLpp5YnMMmqQ8zhBh"],"license":null}},"version":1},"ast":{"absolutePath":"node_modules/@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol","id":31284,"exportedSymbols":{"ReentrancyGuardUpgradeSafe":[31283]},"nodeType":"SourceUnit","src":"0:2370:38","nodes":[{"id":31237,"nodeType":"PragmaDirective","src":"0:23:38","nodes":[],"literals":["solidity","^","0.6",".0"]},{"id":31238,"nodeType":"ImportDirective","src":"24:30:38","nodes":[],"absolutePath":"node_modules/@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol","file":"../Initializable.sol","scope":31284,"sourceUnit":30008,"symbolAliases":[],"unitAlias":""},{"id":31283,"nodeType":"ContractDefinition","src":"807:1562:38","nodes":[{"id":31242,"nodeType":"VariableDeclaration","src":"866:24:38","nodes":[],"constant":false,"name":"_notEntered","overrides":null,"scope":31283,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":31241,"name":"bool","nodeType":"ElementaryTypeName","src":"866:4:38","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"value":null,"visibility":"private"},{"id":31251,"nodeType":"FunctionDefinition","src":"898:106:38","nodes":[],"body":{"id":31250,"nodeType":"Block","src":"953:51:38","nodes":[],"statements":[{"expression":{"argumentTypes":null,"arguments":[],"expression":{"argumentTypes":[],"id":31247,"name":"__ReentrancyGuard_init_unchained","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":31261,"src":"963:32:38","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":31248,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"963:34:38","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":31249,"nodeType":"ExpressionStatement","src":"963:34:38"}]},"documentation":null,"implemented":true,"kind":"function","modifiers":[{"arguments":null,"id":31245,"modifierName":{"argumentTypes":null,"id":31244,"name":"initializer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":29981,"src":"941:11:38","typeDescriptions":{"typeIdentifier":"t_modifier$__$","typeString":"modifier ()"}},"nodeType":"ModifierInvocation","src":"941:11:38"}],"name":"__ReentrancyGuard_init","overrides":null,"parameters":{"id":31243,"nodeType":"ParameterList","parameters":[],"src":"929:2:38"},"returnParameters":{"id":31246,"nodeType":"ParameterList","parameters":[],"src":"953:0:38"},"scope":31283,"stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"id":31261,"nodeType":"FunctionDefinition","src":"1010:515:38","nodes":[],"body":{"id":31260,"nodeType":"Block","src":"1075:450:38","nodes":[],"statements":[{"expression":{"argumentTypes":null,"id":31258,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"id":31256,"name":"_notEntered","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":31242,"src":"1499:11:38","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"hexValue":"74727565","id":31257,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1513:4:38","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"1499:18:38","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":31259,"nodeType":"ExpressionStatement","src":"1499:18:38"}]},"documentation":null,"implemented":true,"kind":"function","modifiers":[{"arguments":null,"id":31254,"modifierName":{"argumentTypes":null,"id":31253,"name":"initializer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":29981,"src":"1063:11:38","typeDescriptions":{"typeIdentifier":"t_modifier$__$","typeString":"modifier ()"}},"nodeType":"ModifierInvocation","src":"1063:11:38"}],"name":"__ReentrancyGuard_init_unchained","overrides":null,"parameters":{"id":31252,"nodeType":"ParameterList","parameters":[],"src":"1051:2:38"},"returnParameters":{"id":31255,"nodeType":"ParameterList","parameters":[],"src":"1075:0:38"},"scope":31283,"stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"id":31278,"nodeType":"ModifierDefinition","src":"1901:434:38","nodes":[],"body":{"id":31277,"nodeType":"Block","src":"1925:410:38","nodes":[],"statements":[{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":31264,"name":"_notEntered","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":31242,"src":"2014:11:38","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"argumentTypes":null,"hexValue":"5265656e7472616e637947756172643a207265656e7472616e742063616c6c","id":31265,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2027:33:38","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619","typeString":"literal_string \"ReentrancyGuard: reentrant call\""},"value":"ReentrancyGuard: reentrant call"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619","typeString":"literal_string \"ReentrancyGuard: reentrant call\""}],"id":31263,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2006:7:38","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":31266,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2006:55:38","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":31267,"nodeType":"ExpressionStatement","src":"2006:55:38"},{"expression":{"argumentTypes":null,"id":31270,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"id":31268,"name":"_notEntered","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":31242,"src":"2136:11:38","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"hexValue":"66616c7365","id":31269,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2150:5:38","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"src":"2136:19:38","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":31271,"nodeType":"ExpressionStatement","src":"2136:19:38"},{"id":31272,"nodeType":"PlaceholderStatement","src":"2166:1:38"},{"expression":{"argumentTypes":null,"id":31275,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"id":31273,"name":"_notEntered","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":31242,"src":"2310:11:38","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"hexValue":"74727565","id":31274,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2324:4:38","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"2310:18:38","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":31276,"nodeType":"ExpressionStatement","src":"2310:18:38"}]},"documentation":"@dev Prevents a contract from calling itself, directly or indirectly.\nCalling a `nonReentrant` function from another `nonReentrant`\nfunction is not supported. It is possible to prevent this from happening\nby making the `nonReentrant` function external, and make it call a\n`private` function that does the actual work.","name":"nonReentrant","overrides":null,"parameters":{"id":31262,"nodeType":"ParameterList","parameters":[],"src":"1922:2:38"},"virtual":false,"visibility":"internal"},{"id":31282,"nodeType":"VariableDeclaration","src":"2341:25:38","nodes":[],"constant":false,"name":"__gap","overrides":null,"scope":31283,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$49_storage","typeString":"uint256[49]"},"typeName":{"baseType":{"id":31279,"name":"uint256","nodeType":"ElementaryTypeName","src":"2341:7:38","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":31281,"length":{"argumentTypes":null,"hexValue":"3439","id":31280,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2349:2:38","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_49_by_1","typeString":"int_const 49"},"value":"49"},"nodeType":"ArrayTypeName","src":"2341:11:38","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$49_storage_ptr","typeString":"uint256[49]"}},"value":null,"visibility":"private"}],"abstract":false,"baseContracts":[{"arguments":null,"baseName":{"contractScope":null,"id":31239,"name":"Initializable","nodeType":"UserDefinedTypeName","referencedDeclaration":30007,"src":"846:13:38","typeDescriptions":{"typeIdentifier":"t_contract$_Initializable_$30007","typeString":"contract Initializable"}},"id":31240,"nodeType":"InheritanceSpecifier","src":"846:13:38"}],"contractDependencies":[30007],"contractKind":"contract","documentation":"@dev Contract module that helps prevent reentrant calls to a function.\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\navailable, which can be applied to functions to make sure there are no nested\n(reentrant) calls to them.\n * Note that because there is a single `nonReentrant` guard, functions marked as\n`nonReentrant` may not call one another. This can be worked around by making\nthose functions `private`, and then adding `external` `nonReentrant` entry\npoints to them.\n * TIP: If you would like to learn more about reentrancy and alternative ways\nto protect against it, check out our blog post\nhttps://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].","fullyImplemented":true,"linearizedBaseContracts":[31283,30007],"name":"ReentrancyGuardUpgradeSafe","scope":31284}]},"id":38}